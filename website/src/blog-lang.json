[{"language":"css","blogs":[{"title":"debug with outline","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["To debug CSS we can set the outline of all elements to be a certain colour."]},{"type":"Code","language":"css","code":["* {","  outline: 1px solid red !important;","}"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Open Replay](https://blog.openreplay.com/using-CSS-background-color-to-debug-web-pages/)"]}]}]},{"language":"js","blogs":[{"title":"sort lexicographic","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["The build-in `Array.sort` method sorts by lexicographic order, even for numbers."]},{"type":"Code","language":"js","code":["const x = [1, 2, 10, 20];","x.sort();","assert(x[0] === 1);","assert(x[1] === 10);","assert(x[2] === 2);","assert(x[3] === 20);"]},{"type":"Header","level":1,"content":"Fix"},{"type":"Paragraph","lines":["A sorting function must be provided for numbers."]},{"type":"Code","language":"js","code":["const x = [1, 2, 10, 20];","x.sort((a, b) => a - b);"]}]}]},{"language":"shell","blogs":[{"title":"zsh colons","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["Putting `:` and one of `ahl` changes the behaviour of a path expansion in `zsh`."]},{"type":"Code","language":"sh","code":["[ -d top ] && rm -rf top","mkdir -p top/next","seq 3 | xargs -I % touch top/next/%","# l behaviour is to delete the first letter","zsh -c 'for f in top/next/*; do echo \"$f:la\"; done' > zsh-out.txt","cat << EOF > zsh-exp.txt","top/next/1a","top/next/2a","top/next/3a","EOF","diff zsh-???.txt","bash -c 'for f in top/next/*; do echo \"$f:la\"; done' > bash-out.txt","cat << EOF > bash-exp.txt","top/next/1:la","top/next/2:la","top/next/3:la","EOF","diff bash-???.txt"]}]},{"title":"git reset","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["The command `git reset` is the opposite of `git add`.","It allows you to remove a file from the staging area in stage 2 here."]},{"type":"OrderedList","list":["file changed in working directory","add to staging area","commit to .git"]}]},{"title":"pushd popq","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["We can name recent folders with a stack-history rather than using `cd -`."]},{"type":"Header","level":1,"content":"Example"},{"type":"Code","language":"sh","code":["$ pushd a","# now in a","a","$ pushd b","# now in b","b a","$ pushd c","# now in c","c b a","$ popd","# now in b","a"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Akamai Developer](https://www.youtube.com/watch?v=AVXYq8aL47Q&t=217)"]}]},{"title":"find exec","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["This blog covers how to use the `find` shell command.","It is very useful for running a shell command on multiple files matching a certain filter."]},{"type":"Header","level":1,"content":"Options"},{"type":"Header","level":2,"content":"1. Aggregate Files"},{"type":"Code","language":"sh","code":["find -exec command {} +"]},{"type":"Paragraph","lines":["Run `command` once and `{}` is passed as its argument list.","This can be roughly translated in Shell like so."]},{"type":"Code","language":"sh","code":["command {1} {2} ... {n}"]},{"type":"Header","level":2,"content":"2. Individually Run"},{"type":"Code","language":"sh","code":["find -exec command \\;`"]},{"type":"Paragraph","lines":["Run `command` on all arguments given to `{}`.","This can be roughly translated in Shell like so."]},{"type":"Code","language":"sh","code":["command {1}","command {2}","command {...}","command {n}"]},{"type":"Paragraph","lines":["The `;` character is a delimeter to the `-exec` flag.","We can't type raw `;` because the shell will interpret it first.","Hence we need to escape it - `\\;`."]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[baeldung](https://www.baeldung.com/linux/find-exec-command)"]}]},{"title":"history bang","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["The `history` command lists previously run shell commands.","All commands have are enumerated so you can run `!101` eg. to run whichever command was enumerated as `101`."]}]},{"title":"glob var order","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["In the Shell, variables are substituted and then globbing occurs.","This means that any glob characters should appear literally unquoted."]},{"type":"Header","level":1,"content":"Example"},{"type":"Paragraph","lines":["Suppose there are these files."]},{"type":"Code","language":"txt","code":["a","aa","b","c"]},{"type":"Paragraph","lines":["Then the glob `a*` should have these files."]},{"type":"Code","language":"txt","code":["a","aa"]},{"type":"Paragraph","lines":["Running `echo a*` will list those files correctly.","However, if you put the glob expression in a variable you won't get the same result."]},{"type":"Code","language":"sh","code":["l='a*'","echo $l"]}]},{"title":"git upstream","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["This problem shows up when making a fresh branch with `git checkout -b`."]},{"type":"Code","language":"txt","code":["fatal: The current branch main has no upstream branch.","To push the current branch and set the remote as upstream, use","    git push --set-upstream origin main","To have this happen automatically for branches without a tracking","upstream, see 'push.autoSetupRemote' in 'git help config'."]},{"type":"Header","level":1,"content":"Solution"},{"type":"Paragraph","lines":["We can run this command to always configure our local branch to link to a branch with the same name on the remote repository."]},{"type":"Code","language":"sh","code":["git config --global --add --bool push.autoSetupRemote true"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Stack Overflow](https://stackoverflow.com/questions/29422101/automatically-track-remote-branch-with-git)"]}]},{"title":"terminal sizing","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["Press `CTRL` and then `-` or `+` to make the fornt smaller or larger respectively.","Afterwards run `reset` to fix formatting."]}]},{"title":"zsh login","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["I am trying to decide if `~/.zshrc` is the best place to put updates to `$PATH`.","Right now, putting modifications in `~/.zshrc` is resulting in duplicate folders."]},{"type":"Header","level":1,"content":"Order of scripts"},{"type":"Paragraph","lines":["There are special scripts prefixed `z` in `/etc` and `~` which control the setup of the shell.","This is the order in which they are run."]},{"type":"OrderedList","list":["`.zshenv`","`.zprofile`","`.zshrc`","`.zlogin`","`.zlogout`"]},{"type":"Paragraph","lines":["There can be up to two copies of these files as per \\[1\\]."]},{"type":"OrderedList","list":["The first run is in `/etc`. This is the default configuration.","The second one is in `~`. This overwrites the corresponding `/etc` version."]},{"type":"Header","level":1,"content":"Solution 1"},{"type":"Paragraph","lines":["Source \\[1\\] recommends putting `$PATH` setup in `.zshenv`."]},{"type":"Header","level":1,"content":"Solution 2"},{"type":"Paragraph","lines":["Source \\[2\\] recommends putting them in `zprofile`.","The issue is that `/etc/zprofile` runs a script `path_helper`.","This script will **append** changes to `$PATH` made from `~/.zshenv`.","This is bad because we want our own changes to `$PATH` to be **prepended**."]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Stack Exchange](https://apple.stackexchange.com/questions/388622/zsh-zprofile-zshrc-zlogin-what-goes-where)","[Stack Exchange](https://apple.stackexchange.com/questions/432226/homebrew-path-set-in-zshenv-is-overridden)"]}]},{"title":"duplicate path folders","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["The folders in `$PATH` are getting duplicated.","I am trying to find out why."]},{"type":"Paragraph","lines":["Theories:"]},{"type":"Table","headers":["no.","desc"],"rows":[["1","`.zshrc` is getting run twice"],["2","some other `zsh` file is running it twice"]]},{"type":"Paragraph","lines":["The issue is that certain folders are getting recorded twice."]},{"type":"Code","language":"sh","code":["/Users/sunny/OneDrive - UNSW/UNSW/Courses/Year 5 - 2023/seng3011"]},{"type":"Paragraph","lines":["These are only ever set in `~/.zshrc` so I know it is getting run twice."]},{"type":"Header","level":1,"content":"Solution"},{"type":"Paragraph","lines":["The following command can remove duplicate items from `$PATH`."]},{"type":"Code","language":"sh","code":["typeset -U path"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[techctl](https://tech.serhatteker.com/post/2019-12/remove-duplicates-in-path-zsh/)"]}]},{"title":"installed utilities","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["This is a list of utilities that were installed using `brew` on my Macbook."]},{"type":"Table","headers":["Name","Description"],"rows":[["`bat`","like `cat` with syntax highlighting"],["`fzf`","fuzzy find a file name given a term"]]}]},{"title":"no multiline func","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["One line functions are syntax errors, so this is a syntax error."]},{"type":"Code","language":"sh","code":["handle() { basename \"$1\" }"]}]},{"title":"background fg","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["Run `CTRL-Z` to send a running program \\(like `vim file`\\) and then run `fg` to get it back."]},{"type":"Code","language":"sh","code":["vim hello.txt","[ control-z ]","# now brought back to terminal","echo hi","fg"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Akamai Developer](https://www.youtube.com/watch?v=AVXYq8aL47Q&t=345s)"]}]},{"title":"no export function posix","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["POSIX compliance is sometimes difficult to work with in `dash`."]},{"type":"Header","level":1,"content":"Example With Xargs"},{"type":"Paragraph","lines":["Using `xargs` it is handy to use Shell functions with the `-exec` flag.","This is better than having to write an individual file for shell functions."]},{"type":"Paragraph","lines":["However, this is not possible as quoted from \\[1\\]."]},{"type":"Paragraph","lines":["> In sh, it is not possible to export a function"]},{"type":"Paragraph","lines":["A full explanation can be found in \\[2\\]."]},{"type":"Paragraph","lines":["> No. The POSIX specification for export lacks the -f present in bash that allows one to export a function.","> A (very verbose) workaround is to save your function to a file and source it in the child script."]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Stack Overflow](https://stackoverflow.com/questions/1885871/exporting-a-function-in-shell)","[Stack Overflow](https://stackoverflow.com/questions/29239806/how-to-export-a-function-in-bourne-shell)"]}]},{"title":"do not store exit status","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["Do not store the exit status `$?` in a variable.","You will get this error:"]},{"type":"Code","language":"","code":["read-only variable: status"]},{"type":"Header","level":1,"content":"Solution"},{"type":"Paragraph","lines":["The alternative would be to use a `trap` command."]},{"type":"Paragraph","lines":["This sentiment is shared online \\[1\\]."]},{"type":"Paragraph","lines":["> I recommend against the use of $? as much as possible, as it is fragile and easy to overlook when refactoring"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Stack Overflow](https://stackoverflow.com/questions/36921658/save-command-output-on-variable-and-check-exit-status)"]}]},{"title":"bang bang","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["`!!` refers to the last run command."]},{"type":"Code","language":"sh","code":["echo hello","sudo !! # this is the same as","sudo echo hello"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Akamai Developer](https://youtu.be/AVXYq8aL47Q?si=pSpSXghvq-Vq5P7p&t=524)"]}]},{"title":"bang end string","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["You cannot end a string with a bang like this."]},{"type":"Code","language":"sh","code":["echo \"fish!\"",">"]},{"type":"Paragraph","lines":["The prompt \\(PS2\\) will be shown."]}]},{"title":"newline at end","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["Should newlines be put at the end of a file?"]},{"type":"Header","level":2,"content":"Vim"},{"type":"Paragraph","lines":["Using `vim`, an ending lone newline will not be shown.","Hence if you add an extra one in, there will be two lone newlines at the end of the file."]},{"type":"Header","level":2,"content":"Yes"},{"type":"Paragraph","lines":["It makes it easier to view the last line in an editor: the cursor will be not at the end."]},{"type":"Header","level":2,"content":"No"},{"type":"Paragraph","lines":["When running `cat` on the file, an extra newline will get printed out."]},{"type":"Header","level":1,"content":"Conclusion"},{"type":"Paragraph","lines":["Yes a newline should be put in.","The `cat` command is for convenience viewing of files only."]}]},{"title":"handy utilities","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["This is a list of handy Shell utilities."]},{"type":"Table","headers":["Utility","Overview","Mac (y/n)"],"rows":[["`rename`","easily rename files based on a pattern","n"],["`paste`","join matching line numbers in files by a delimiter","y"],["`realpath`","get the absoulte path for a given file","y"],["`fc`","edit the last shell command in editor","y"]]}]},{"title":"global path","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["Changes to the `$PATH` environment variable made in `~/.zshrc` are not spread to other programs."]},{"type":"Header","level":1,"content":"Context"},{"type":"Paragraph","lines":["There is a separate issue relating to the `latexindent` command not working.","The GitHub Issue in \\[1\\] references a problem where the wrong `latexindent` command is getting run.","The solution fixes this by changing the order of folders in `$PATH`."]},{"type":"Header","level":1,"content":"Solution"},{"type":"Paragraph","lines":["This shell command can spread `$PATH` to other programs."]},{"type":"Code","language":"sh","code":["launchctl setenv PATH $PATH"]},{"type":"Paragraph","lines":["This can be added to `~/.zshrc`."]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[GitHub Issue](https://github.com/James-Yu/LaTeX-Workshop/issues/2135)","[Stack Overflow](https://stackoverflow.com/questions/135688/setting-environment-variables-on-os-x)"]}]},{"title":"ifs bash","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["In Bash, the shell processes arguments from unquoted variables based on the `IFS` variable."]},{"type":"Code","language":"sh","code":["command $var"]},{"type":"Header","level":1,"content":"Example"},{"type":"Code","language":"sh","code":["bash","A='a b c'","python3 -c 'import sys; print(\",\".join(sys.argv))' $A"]},{"type":"Paragraph","lines":["This will run `python3` with three arguments `a b c`.","This is because there is normally whitespace in `IFS`."]},{"type":"Header","level":1,"content":"Z-Shell vs Bash"},{"type":"Paragraph","lines":["Here is an example of something that will only run correctly on `zsh` compared to `bash`."]},{"type":"Code","language":"sh","code":["#!/bin/zsh","string=foo:bar:foobar","old_ifs=\"$IFS\"","IFS=\":\"","for i in $string","do","  echo \"'$i' is the splitted word\"","done"]},{"type":"Paragraph","lines":["The following is the Z-Shell output."]},{"type":"Code","language":"txt","code":["foo:bar:foobar"]},{"type":"Paragraph","lines":["Comparatively, this is the Bash output."]},{"type":"Code","language":"txt","code":["'foo' is the splitted word","'bar' is the splitted word","'foobar' is the splitted word"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Stack Exchange](https://unix.stackexchange.com/questions/26661/what-is-word-splitting-why-is-it-important-in-shell-programming/26672#26672)"]}]},{"title":"null glob","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["The ability for an empty glob to return no results can be turned on."]},{"type":"Header","level":1,"content":"Using setopt"},{"type":"Paragraph","lines":["Use this Shell command."]},{"type":"Code","language":"sh","code":["setopt -s nullglob"]},{"type":"Header","level":1,"content":"The N Character"},{"type":"Paragraph","lines":["The `(N)` character can be used to mimic this behaviour.","Suppose there are these files."]},{"type":"Code","language":"txt","code":["a","b","c"]},{"type":"Paragraph","lines":["Then `echo fish*(N)` produces nothing as per \\[1\\]."]},{"type":"Header","level":1,"content":"Not Using Glob"},{"type":"Paragraph","lines":["We can loop and manually break the loop if the literal glob gets returned from \\[2\\]."]},{"type":"Code","language":"sh","code":["for txt in *.txt","do","  [ -e \"$txt\" ] || break","  echo \"loading data from $txt\"","done"]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Stack Exchange](https://unix.stackexchange.com/questions/26805/how-to-silently-get-an-empty-string-from-a-glob-pattern-with-no-matches).","[Super User](https://superuser.com/questions/519374/how-to-handle-bash-matching-when-there-are-no-matches)"]}]},{"title":"tmux","html":[{"type":"Header","level":1,"content":"Notes"},{"type":"OrderedList","list":["Enter `tmux` to start","Cannot enter `Command + k` to clear screen","Any command letter that is a shift-pressed key, must have shift pressed to work"]},{"type":"Header","level":1,"content":"Modifier"},{"type":"Paragraph","lines":["Press the modifier key and then a command letter.","In Zac's `.tmux.conf` this was `Control + a`."]},{"type":"UnorderedList","list":["It is apparently the most ergonomic combination."]},{"type":"Paragraph","lines":["By default it is `Control + b`.","You have to release the modifier and then press the command letter as per this [guide](https://superuser.com/questions/266725/tmux-ctrlb-not-working).","This is a list of [default command letters](https://man.openbsd.org/tmux#DEFAULT_KEY_BINDINGS)."]},{"type":"Header","level":1,"content":"Windows"},{"type":"Paragraph","lines":["They are more like tabs in a browser."]},{"type":"Table","headers":["Letter","Description"],"rows":[["c","make new window"],["&","kill current window"],["1..9","go to window 1..9"],[",","rename window"],["p","go to previous window"],["n","go to next window"],["x","close window"]]},{"type":"Paragraph","lines":["A window can be split into panes.","Panes are closed by `Control + d` or the command letter `x`.","Can switch using arrow keys as the command letter or `o`."]},{"type":"Table","headers":["Letter","Description"],"rows":[["%","split vertically"],["\"","split horizontally"],["z","toggle pane as full size"],["x","close pane"]]},{"type":"Paragraph","lines":["All open windows are saved in a session.","Exiting is also referred to as **detatching**."]},{"type":"Table","headers":["Letter","Description"],"rows":[["d","exit out of session"]]},{"type":"Header","level":2,"content":"Shell Commands"},{"type":"Paragraph","lines":["Run these via `tmux` then provide the argument."]},{"type":"Table","headers":["Argument","Description"],"rows":[["`attach -t[n]`","go back into a previous session replacing `[n]` with the index or name"],["`rename-session [name]`","rename the session to `[name]`"],["`ls`","see all running sessions"]]},{"type":"Header","level":1,"content":"Configuration"},{"type":"Paragraph","lines":["The configuration file is stored in `~/.tmux.conf`.","When it is changed, `tmux` will automatically update in response.","However, if there are any running sessions, they must all be [exited first](https://unix.stackexchange.com/questions/66606/tmux-not-sourcing-my-tmux-conf#answer-66607)."]},{"type":"Header","level":1,"content":"YouTube Guides"},{"type":"Table","headers":["Title"],"rows":[["[Inside my iPad Pro SSH Setup - TMUX](https://www.youtube.com/watch?v=B-1wGwvUwm8)"]]}]},{"title":"nested double quoting","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["There is no need to wrap variables expanded in subshells with double quotes.","As soon as you write one `\"\"`, white spaces are preserved in variable expansions.","If you did then this should print out `0`:"]},{"type":"Code","language":"sh","code":["[ -d t ] && rm -r t","cd t","touch 'three   two  one end.txt'","full='t/three   two  one end.txt'","cd ..","[ \"$(basename $full)\" = \"$(basename \"$full\")\" ]","echo $?"]}]},{"title":"heredoc cat","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["The `cat` command is not strictly needed in `heredocs`."]},{"type":"Paragraph","lines":["> Heredocs are a shell-syntax feature so they don't require cat specifically."]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[Super User](https://superuser.com/questions/1829271/how-do-i-pipe-a-heredoc)"]}]}]},{"language":"rust","blogs":[{"title":"ref keyword","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["The `ref` keyword allows you unpack a pattern match item as a reference.","Normally, pattern matched items are moved."]},{"type":"Code","language":"rs","code":["let opt: Option<Vec<i32>> = Some(Vec<i32>::new());","match opt {","    // so here, vec is a reference","    Some(ref vec) => {},","    None => {}","}"]},{"type":"Paragraph","lines":["It would seem more natural to do something like this."]},{"type":"Code","language":"rs","code":["Some(&vec)"]},{"type":"Paragraph","lines":["However, in Rust, only the right-hand side of an expression should have an `&`."]},{"type":"Code","language":"rs","code":["let x = 10;","let y = &x; // we don't write let &y"]}]}]},{"language":"html","blogs":[{"title":"text fragment","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["Text fragments offer a way to direct to a specific spot in an HTML file.","The documentation from MDM is [here](https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#browser_compatibility).","Anchor `<a>` tags in their `href` can redirect to an element's id using a hash like so."]},{"type":"Code","language":"html","code":["<a href=\"#os.environ\">hello</a>"]},{"type":"Paragraph","lines":["This is an example taken from [pydocs](https://docs.python.org/3/library/os.html#os.environ).","The fragment is captured in the url like so."]},{"type":"Code","language":"","code":["https://docs.python.org/3/library/os.html#os.environ"]},{"type":"Header","level":1,"content":"Known Issues"},{"type":"Paragraph","lines":["[Some browsers](https://meta.stackoverflow.com/questions/425878/link-to-a-specific-spot-in-a-stack-overflow-question-answer) support the ability to create fragments based on a selection of text.","However Firefox does not support this and the feature is prone to browser compatability issues in general."]}]}]},{"language":"cpp","blogs":[{"title":"class implementation qualified names","html":[{"type":"Header","level":1,"content":"Class-Name Qualification"},{"type":"Paragraph","lines":["In C++ when you implement a class in a `.cpp` file you must qualify the class name."]},{"type":"Code","language":"cpp","code":["// in .h","struct X {","  void f(T);","};","// in .cpp","void X::f(T t = count) { }"]},{"type":"Paragraph","lines":["The only other alternative to qualifying the class name is to write the implementation in the header file."]},{"type":"Header","level":1,"content":"Sources"},{"type":"OrderedList","list":["[timsong-cpp](https://timsong-cpp.github.io/cppwp/n4659/class.mem#class.mfct-4)"]}]},{"title":"binary search last","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["The `upper_bound` and `lower_bound` functions give iterators to the first element matching a condition.","It is possible to change the behaviour so that the last position is instead returned."]},{"type":"Paragraph","lines":["Use reverse iterators in conjunction with the `greater<N>` comparator to do this."]},{"type":"Code","language":"cpp","code":["#include <algorithm>","#include <cassert>","#include <utility>","#include <vector>","auto main(void) -> int {","    /**","        what is the biggest index from [2, 6) st.","        boxes[i] <= 6","        it is 2, boxes[2] = 5","     */","    auto boxes = std::vector<int>{1 , 3 , 5 , 10, 14, 18};","    //                            0   1   2   3   4   5","    // reverse                 e                      b","    //                         -- ->                  <- ++","    //                            18, 14, 10, 5 , 3 , 1","    //                            0   1   2   3   4   5","    //                                        ^ should be this index","    auto j = std::lower_bound(boxes.rbegin(), boxes.rend() - 1 - 1, 6, std::greater<int>()) - boxes.rbegin();","    assert(j == 3);","}"]}]},{"title":"reverse iterator indexing","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["To access the position of a reverse iterator, you still subtract it from `rbegin`."]},{"type":"Code","language":"cpp","code":["#include <algorithm>","#include <cassert>","#include <iostream>","int main() {","    auto vec = std::vector<int>{1 , 3 , 5 , 10, 14, 18};","    //                                          j","    // reverse indices","    //                          5   4   3   2   1   0","    auto j = ++vec.rbegin();","    assert(*j == 14);","    auto j_idx = j - vec.rbegin();","    assert (j_idx == 1);","}"]}]},{"title":"binary search last exclusive","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["When using `upper_bound` and `lower_bound` from `<algorithm>` the end iterator range is not inclusive."]},{"type":"Code","language":"cpp","code":["#include <algorithm>","#include <cassert>","#include <vector>","auto main(void) -> int {","    auto nums = std::vector<int>{10, 20, 30};","    // essentially find the first element > 25 out of {10, 20}","    // nums.end() - 1 points to the index of 30","    auto idx = std::upper_bound(nums.begin(), nums.end() - 1, 25);","    assert(idx == nums.end() - 1);","}"]}]},{"title":"constructor no return type","html":[{"type":"Header","level":1,"content":"Overview"},{"type":"Paragraph","lines":["Constructors have no return type, so how can you prematurely end one if you need to?"]},{"type":"Header","level":1,"content":"Compiler Error"},{"type":"Paragraph","lines":["This error will be shown if you try return something inside a constructor."]},{"type":"Paragraph","lines":["> error: constructor ... should not return a value [-Wreturn-type]"]},{"type":"Header","level":1,"content":"Solution"},{"type":"Paragraph","lines":["Constructors should throw an exception if they fail.","Although essentially a constructor is considered to have a return type of `void`."]}]}]}]